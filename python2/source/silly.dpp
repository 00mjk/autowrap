#include "Python.h"


static extern(C) PyObject* silly_strlen(PyObject* self, PyObject *args) {
    import core.stdc.string: strlen;
    const char* arg;
    if(!PyArg_ParseTuple(args, "s", &arg))
        return null;
    const auto len = strlen(arg);
    return PyLong_FromLong(len);
}


static auto SillyMethods = [
    PyMethodDef("strlen".ptr, &silly_strlen, METH_VARARGS),
    PyMethodDef(),
];


extern(C) PyMODINIT_FUNC PyInit_silly() {
    static PyModuleDef sillymodule;
    //static auto sillymodule = PyModuleDef(
    sillymodule = PyModuleDef(
        //PyModuleDef_HEAD_INIT,  // this won't work due to C syntax
        PyModuleDef_Base(PyObject(1 /*ref count*/, null /*type*/), null /*m_init*/, 0/*m_index*/, null/*m_copy*/),
        "silly".ptr, // name
        null, // documentation
        -1, // size of per-interpreter module state or -1 if the module keeps state in globals
        SillyMethods.ptr,
        );

    return PyModule_Create(&sillymodule);
}
