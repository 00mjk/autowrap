/**
   Functions to wrap entities in D modules for Python consumption.

   These functions are usually not called directly, but from the mixin generated by
   autowrap.python.boilerplate.pydBoilerplate.
 */
module autowrap.python.wrap;

import autowrap.reflection: isUserAggregate, isModule;
import std.meta: allSatisfy;
import std.traits: isArray;


private alias I(alias T) = T;
private enum isString(alias T) = is(typeof(T) == string);

///  Wrap global functions from multiple modules
void wrapAllFunctions(Modules...)() if(allSatisfy!(isModule, Modules)) {
    import autowrap.reflection: AllFunctions;
    import pyd.pyd: def, PyName;

    static foreach(function_; AllFunctions!Modules) {
        static if(__traits(compiles, def!(function_.symbol, PyName!(toSnakeCase(function_.name)))()))
            def!(function_.symbol, PyName!(toSnakeCase(function_.name)))();
        else
            pragma(msg, "\nERROR! Autowrap could not wrap function `", function_.name, "` for Python\n");
    }
}


/// Converts an identifier from camelCase or PascalCase to snake_case.
string toSnakeCase(in string str) @safe pure {

    import std.algorithm: all, map;
    import std.ascii: isUpper;

    if(str.all!isUpper) return str;

    string ret;

    string convert(in size_t index, in char c) {
        import std.ascii: isLower, toLower;

        const prefix = index == 0 ? "" : "_";
        const isHump =
            (index == 0 && c.isUpper) ||
            (index > 0 && c.isUpper && str[index - 1].isLower);

        return isHump ? prefix ~ c.toLower : "" ~ c;
    }

    foreach(i, c; str) {
        ret ~= convert(i, c);
    }

    return ret;
}


@("toSnakeCase empty")
@safe pure unittest {
    static assert("".toSnakeCase == "");
}

@("toSnakeCase no caps")
@safe pure unittest {
    static assert("foo".toSnakeCase == "foo");
}

@("toSnakeCase camelCase")
@safe pure unittest {
    static assert("toSnakeCase".toSnakeCase == "to_snake_case");
}

@("toSnakeCase PascalCase")
@safe pure unittest {
    static assert("PascalCase".toSnakeCase == "pascal_case");
}

@("toSnakeCase ALLCAPS")
@safe pure unittest {
    static assert("ALLCAPS".toSnakeCase == "ALLCAPS");
}


/**
   wrap all aggregates found in the given modules, specified by their name
   (to avoid importing all of them first).

   This function wraps all struct and class definitions, and also all struct and class
   types that are parameters or return types of any functions found.
 */
void wrapAllAggregates(Modules...)() if(allSatisfy!(isModule, Modules)) {

    import autowrap.reflection: AllAggregates, Module;
    import std.meta: staticMap;
    import std.traits: fullyQualifiedName;

    static foreach(aggregate; AllAggregates!Modules) {
        static if(__traits(compiles, wrapAggregate!aggregate))
            wrapAggregate!aggregate;
        else {
            pragma(msg, "\nERROR! Autowrap could not wrap aggregate `", fullyQualifiedName!aggregate, "` for Python\n");
            // wrapAggregate!aggregate; // uncomment to see the error messages from the compiler
        }
    }
}

private template isProperty(alias F) {
    import std.traits: functionAttributes, FunctionAttribute;
    enum isProperty = functionAttributes!F & FunctionAttribute.property;
}

/**
   Wrap aggregate of type T.
 */
auto wrapAggregate(T)() if(isUserAggregate!T) {

    import autowrap.reflection: Symbol;
    import autowrap.python.pyd.class_wrap: MemberFunction;
    import pyd.pyd: wrap_class, Member, Init, StaticDef, Repr, Property;
    import std.meta: staticMap, Filter, templateNot;
    import std.algorithm: startsWith;

    alias AggMember(string memberName) = Symbol!(T, memberName);
    alias members = staticMap!(AggMember, __traits(allMembers, T));
    alias memberFunctions = Filter!(isMemberFunction, members);
    alias staticMemberFunctions = Filter!(isStatic, memberFunctions);
    alias nonStaticMemberFunctions = Filter!(templateNot!isStatic, memberFunctions);
    enum isOperator(alias F) = __traits(identifier, F).startsWith("op");
    alias regularMemberFunctions = Filter!(templateNot!isOperator, Filter!(templateNot!isProperty, nonStaticMemberFunctions));

    enum isToString(alias F) = __traits(identifier, F) == "toString";

    wrap_class!(
        T,
        staticMap!(Member, PublicFields!T),
        staticMap!(MemberFunction, regularMemberFunctions),
        staticMap!(StaticDef, staticMemberFunctions),
        staticMap!(InitTuple, ConstructorParamTuples!T),
        staticMap!(Repr, Filter!(isToString, memberFunctions)),
        staticMap!(Property, Properties!nonStaticMemberFunctions),
        OpUnaries!T,
        OpBinaries!T,
        OpBinaryRights!T,
        staticMap!(DefOpSlice, OpSlices!T),
   );
}

private template PublicFields(T) {
    import std.meta: Filter, AliasSeq;
    import std.traits: FieldNameTuple;

    enum isPublic(string fieldName) = __traits(getProtection, __traits(getMember, T, fieldName)) == "public";
    alias publicFields = Filter!(isPublic, FieldNameTuple!T);

    // FIXME - See #54
    static if(is(T == class))
        alias PublicFields = AliasSeq!();
    else
        alias PublicFields = publicFields;

}

private template DefOpSlice(alias F) {
    import pyd.pyd: Def, PyName;
    import std.traits: ReturnType, Parameters;
    alias DefOpSlice = Def!(F, PyName!"__iter__", ReturnType!F function(Parameters!F));
}

private template OpSlices(T) {
    import std.traits: hasMember, Parameters;
    import std.meta: AliasSeq, Filter;

    static if(hasMember!(T, "opSlice")) {
        // See testdll for details on this
        enum hasNoParams(alias F) = Parameters!F.length == 0;
        alias OpSlices = Filter!(hasNoParams, __traits(getOverloads, T, "opSlice"));
    } else
        alias OpSlices = AliasSeq!();
}


// A tuple, with as many elements as constructors. Each element is a
// std.typecons.Tuple of the constructor parameter types.
private template ConstructorParamTuples(alias T) {
    import std.meta: staticMap, AliasSeq;
    import std.traits: Parameters, hasMember;
    import std.typecons: Tuple;

    // If we staticMap with std.traits.Parameters, we end up with a collapsed tuple
    // i.e. with one constructor that takes int and another that takes int, string,
    // we'd end up with 3 elements (int, int, string) instead of 2 ((int), (int, string))
    // so we package them up in a std.typecons.Tuple to avoid flattening
    // each being an AliasSeq of types for the constructor
    alias ParametersTuple(alias F) = Tuple!(Parameters!F);

    static if(hasMember!(T, "__ctor"))
        alias constructors = AliasSeq!(__traits(getOverloads, T, "__ctor"));
    else
        alias constructors = AliasSeq!();

    // A tuple, with as many elements as constructors. Each element is a
    // std.typecons.Tuple of the constructor parameter types.
    alias ConstructorParamTuples = staticMap!(ParametersTuple, constructors);
}

// Apply pyd's Init to the unpacked types of the parameter Tuple.
private template InitTuple(alias Tuple) {
    import pyd.pyd: Init;
    alias InitTuple = Init!(Tuple.Types);
}


private template PythonableBinaryOperators() {
    import std.meta: AliasSeq;
    alias PythonableBinaryOperators = AliasSeq!(
        "+", "-", "*", "/", "%", "^^", "<<", ">>", "&", "^", "|", "in",
    );
}

private alias OpBinaries(T)     = Operators!(T, "opBinary");
private alias OpBinaryRights(T) = Operators!(T, "opBinaryRight");
private alias OpUnaries(T)      = Operators!(T, "opUnary");

private template Operators(T, string name) {
    import std.uni: toUpper;
    import std.conv: text;

    private enum pydName = name[0].toUpper.text ~ name[1..$];
    mixin(`import pyd.pyd: ` ~ pydName ~ `;`);
    import std.meta: AliasSeq, staticMap, Filter;
    import std.traits: hasMember;

    private enum hasOperator(string op) = is(typeof(probeTemplate!(T, name, op)));
    mixin(`alias toPyd(string op) = ` ~ pydName ~ `!op;`);

    alias pythonableOperators = AliasSeq!(
        "+", "-", "*", "/", "%", "^^", "<<", ">>", "&", "^", "|", "in", "~",
    );

    static if(hasMember!(T, name)) {
        private alias dOperatorNames = Filter!(hasOperator, pythonableOperators);
        alias Operators = staticMap!(toPyd, dOperatorNames);
    } else
        alias Operators = AliasSeq!();
}


private auto probeTemplate(T, string templateName, string op)() {
    import std.traits: ReturnType, Parameters;
    import std.meta: Alias;

    mixin(`alias func = T.` ~ templateName ~ `;`);
    alias R = ReturnType!(func!op);
    alias P = Parameters!(func!op);

    auto obj = T.init;

    static if(is(R == void))
        mixin(`obj.` ~ templateName ~ `!op(P.init);`);
    else
        mixin(`R ret = obj.` ~ templateName ~ `!op(P.init);`);
}


private template Properties(functions...) {
    import std.meta: Filter;
    import std.traits: functionAttributes, FunctionAttribute;
    alias Properties = Filter!(isProperty, functions);
}


// must be a global template
private template isMemberFunction(A...) if(A.length == 1) {
    import std.algorithm: startsWith;

    alias T = A[0];

    static if(__traits(compiles, __traits(identifier, T))) {
        enum name = __traits(identifier, T);
        enum isMemberFunction =
            isPublicFunction!T
            && !name.startsWith("__")
            && name != "toHash"
            ;
    } else
        enum isMemberFunction = false;
}


private template isPublicFunction(alias F) {
    import std.traits: isFunction;
    enum prot = __traits(getProtection, F);
    enum isPublicFunction = isFunction!F && (prot == "export" || prot == "public");
}


private template isStatic(alias F) {
    import std.traits: hasStaticMember;
    enum isStatic = hasStaticMember!(__traits(parent, F), __traits(identifier, F));
}

@safe pure unittest {
    static struct Struct {
        int foo();
        static int bar();
    }

    static assert(!isStatic!(Struct.foo));
    static assert( isStatic!(Struct.bar));
}
